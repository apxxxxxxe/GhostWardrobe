// ****使い方****
// 関数名はイベント名そのままです。SHIORI/3.0テンプレートのように、
// 文字列取得時頭にOn_がつくようなことはありません。
// 値を返すとその内容をSakuraScriptとして実行します
// 以下の変数に代入すると、動作を制御できます。
//   res_event , res_reference[0]...[n]
//     指定したイベントをReferenceつきで発生します。referenceは省略可
//   res_target
//     スクリプトやイベントをどのゴーストに送るかを指定します。
//     Sakura名を指定してください。また、__SYSTEM_ALL_GHOST__で全起動中ゴーストに通知します。
//     省略すると「プラグインメニューを実行したゴースト」に送ります
//   res_marker
//     バルーンのマーカー(下に小さく出るステータス表示)に表示する文字を指定できます。
//   res_event_option / res_script_option
//     それぞれ、EventOption / ScriptOptionヘッダを設定します。
// 詳しくはプラグイン仕様書を参照してください。
// http://emily.shillest.net/specwiki/index.php?PLUGIN%2F2.0%2F%E4%BB%95%E6%A7%98%E6%9B%B8

// 初期化処理
OnSystemLoad
{
  name = 'GhostWardrobe'
  FUNCTIONEX('proxy_ex.dll', '/charset', 'UTF-8')

  var_prefix_bind_script = 'bind_script'
  var_prefix_shell_path = 'shell_path'
  var_prefix_bind_part = 'bind_part'
  var_prefix_scope_count = 'scope_count'
  var_prefix_chara_names = 'chara_names'

  updateOnLoad = 0
}

OnSystemUnload
{
  ERASEVAR('shell_dat_lastchanged')
  ERASEVAR('save_queued_ghost')
  ERASEVAR('current_ghost')
  ERASEVAR('current_shell')
  ERASEVAR('current_scope')
  ERASEVAR('is_limit_dressup_changed_dialog')
}

OnGhostBoot : void
{
  OnGhostInfoUpdate
}

OnGhostInfoUpdate : void
{
  LETTONAME(EscapeSpaces("%(var_prefix_shell_path).%(reference[1]).%(reference[2])"), reference[5])

  // shell.datから着せ替えを持つキャラクター(\0,\1,...)の数を割り出す
  _shell_dat = "%(reference[5])\profile\shell.dat"
  _scope_count = 0
  if FOPEN(_shell_dat, 'r') != 0 {
    while 1 {
      _line = FREAD(_shell_dat)
      if _line == -1 {
        break
      }
      elseif RE_SEARCH(_line, 'char[0-9]+\.bind\.savearray') {
        _scope_count++
      }
    }
    LETTONAME(EscapeSpaces("%(var_prefix_scope_count).%(reference[1]).%(reference[2])"), _scope_count)
  }
  else {
    'error: ファイル読み取り(shell.dat)に失敗しました'
    return
  }
  void FCLOSE(_shell_dat)

  // ghost/descript.txtからキャラクター(\0,\1,...)の名前を変数に格納する
  _ghost_descript = "%(reference[4])\ghost\master\descript.txt"
  _current_fcharset = 0
  FCHARSET(0)
  if FOPEN(_ghost_descript, 'r') != 0 {
    _chara_names = IARRAY
    for _i=0; _i<_scope_count; _i++ {
      _chara_names ,= GetDescriptScope(_i)
    }

    while 1 {
      _line = FREAD(_ghost_descript)
      if _line == -1 {
        break
      }
      elseif 'charset,UTF-8' _in_ _line && _current_fcharset != 1 {
        void FCLOSE(_ghost_descript)
        _current_fcharset = 1
        FCHARSET(1)
        void FOPEN(_ghost_descript, 'r')
      }
      elseif RE_SEARCH(_line, '(sakura|kero|char[0-9]+)\.name,(.+)') {
        _scope = 0
        case RE_GETSTR()[1] {
          when 'sakura' {
            _scope = 0
          }
          when 'kero' {
            _scope = 1
          }
          others {
            _scope = TOINT(SUBSTR(RE_GETSTR[1], 4, 5))
          }
        }
        _chara_names[_scope] = RE_GETSTR()[2]
      }
    }
    _current_fcharset = 0
    FCHARSET(0)
    LETTONAME(EscapeSpaces("%(var_prefix_chara_names).%(reference[1])"), _chara_names)
  }
  else {
    'error: ファイル読み取り(descript.txt)に失敗しました'
    return
  }
  void FCLOSE(_ghost_descript)

}

OnMenuExec
{
  current_ghost = reference[1]
  current_shell = reference[2]
  current_scope = 0

  _save_choice = ''
  if EVAL(EscapeSpaces("%(var_prefix_scope_count).%(current_ghost).%(current_shell)")) == 1 {
    _save_choice = '\![*]\q[現在の着せ替え状態を保存,OnBindSave,0]\n'
  }
  else {
    _save_choice = '\![*]\q[現在の着せ替え状態を保存,OnBindSavePre]\n'
  }

  "\_qプラグイン %(version)\n\n/
  %(_save_choice)/
  \![*]\q[読み込み,OnBindRestoreMenu]\n\n/
  \![*]\q[閉じる,OnMenuClose]"
}

OnMenuClose
{
  ERASEVAR('current_ghost')
  ERASEVAR('current_shell')
  ERASEVAR('current_scope')
}

OnBindSavePre
{
  _msg = '\_qどのキャラクターの着せ替えを保存しますか？\n\n'
  --
  for _i=0; _i<EVAL(EscapeSpaces("%(var_prefix_scope_count).%(current_ghost).%(current_shell)")); _i++ {
    _msg += "\![*]\q[%(GetCharacterName(_i)),OnBindSave,%(_i)]\n"
  }
  _msg += "\n\![*]\q[戻る,OnMenuExec,dummy,%(current_ghost),%(current_shell)]"

  _msg
}

OnBindSave
{
  _shell_dat = EVAL(EscapeSpaces("%(var_prefix_shell_path).%(current_ghost).%(current_shell)")) + '\profile\shell.dat'
  shell_dat_lastchanged = FATTRIB(_shell_dat)[10]
  if shell_dat_lastchanged == -1 {
    'error: ファイル属性読み取り(shell.dat)に失敗しました'
    return
  }
  save_queued_ghost = current_ghost
  current_scope = reference[0]
  "\_q保存中...\![timerraiseplugin,100,1,%(name),OnReloadShell]\![reload,shell]"
}

OnOtherGhostTalk
{
  if reference[3] == 'OnDressupChanged' && is_limit_dressup_changed_dialog {
    // OnDressupChangedのセリフでメニューが閉じられるのを抑制
    is_limit_dressup_changed_dialog = 0
    "\![raiseplugin,%(name),OnBindRestoreMenu]"
  }
}

OnSecondChange
{
  // 起動したら１回だけ更新をかける
  if updateOnLoad == 0 {
    updateOnLoad = 1
    "\C\![updateother,--plugin=%(name)]"
  }
}

OnReloadShell
{
  _shell_path = EVAL(EscapeSpaces("%(var_prefix_shell_path).%(save_queued_ghost).%(current_shell)"))
  _shell_dat = _shell_path + '\profile\shell.dat'
  _shell_descript = _shell_path + '\descript.txt'
  _binds = IARRAY

  // shell.datの最終更新日時を取得
  _lastchanged = FATTRIB(_shell_dat)[10]
  if _lastchanged == -1 {
    'error: ファイル属性読み取り(shell.dat)に失敗しました'
    return
  }

  // 最終更新日時が変わっていなければ再度timerraiseplugin
  if _lastchanged == shell_dat_lastchanged {
    '\![timerraiseplugin,250,1,%(name),OnReloadShell]'
    return
  }

  // shell.datから各着せ替えパーツのオンオフ情報を取り出す
  if FOPEN(_shell_dat, 'r') != 0 {
    _line = ''
    while 1 {
      _line = FREAD(_shell_dat)
      if RE_SEARCH(_line, "char%(current_scope)\.bind\.savearray") {
        break
      }
    }
    _binds = SPLIT(SPLIT(_line, ',')[1], ' ')
  }
  else {
    'error: ファイル読み取り(shell.dat)に失敗しました'
    return
  }
  void FCLOSE(_shell_dat)

  // descript.txtから各着せ替えパーツの番号とカテゴリ名&パーツ名の対応関係を取り出す
  _current_fcharset = 0
  FCHARSET(0)
  if FOPEN(_shell_descript, 'r') != 0 {
    _line = ''
    while 1 {
      _line = FREAD(_shell_descript)
      _rep = "^%(GetDescriptScope(current_scope))\.bindgroup([0-9]+)\.name"
      if _line == -1 {
        break
      }
      elseif 'charset,UTF-8' _in_ _line && _current_fcharset != 1 {
        void FCLOSE(_shell_descript)
        _current_fcharset = 1
        FCHARSET(1)
        void FOPEN(_shell_descript, 'r')
      }
      if RE_SEARCH(_line, _rep) {
        _bind_info = SPLIT(RE_REPLACEEX(_line, _rep, '$1'), ',')
        LETTONAME(EscapeSpaces("%(var_prefix_bind_part).%(save_queued_ghost).%(current_shell).%(current_scope).%(_bind_info[0])"), "%(_bind_info[1]),%(_bind_info[2])")
      }
    }
    _current_fcharset = 0
    FCHARSET(0)
  }
  else {
    'error: ファイル読み取り(descript.txt)に失敗しました'
    return
  }
  void FCLOSE(_shell_descript)

  // 着せ替え読み込み用のさくらスクリプトを作る
  _bind_scripts = "\p[%(current_scope)]"
  foreach _binds; _bind {
    _b = SPLIT(_bind, '=')
    _bind_scripts += '\![bind,' + EVAL(EscapeSpaces("%(var_prefix_bind_part).%(save_queued_ghost).%(current_shell).%(current_scope).%(_b[0])")) + ",%(_b[1])]"
  }

  // STRDIGESTがうまくいかないのでhashing.exeを使う
  _key = FUNCTIONEX('proxy_ex.dll', 'hashing.exe', _bind_scripts)

  LETTONAME(EscapeSpaces("%(var_prefix_bind_script).%(save_queued_ghost).%(current_shell).%(current_scope).%(_key)"), _bind_scripts)

  save_queued_ghost = ''
  "\_q着せ替えを保存しました。\n保存名: %(_key)\x\![raiseplugin,%(name),OnMenuExec,dummy,%(save_queued_ghost),%(current_shell)]"
}

OnBindRestoreMenu
{
  _script = "\_q\0\b[2]保存した着せ替えの呼び出し\n/
  現在のシェル: %(current_shell)\n\n"
  for _scope=0; _scope<EVAL(EscapeSpaces("%(var_prefix_scope_count).%(current_ghost).%(current_shell)")); _scope++ {
    _script += "■%(GetCharacterName(_scope))\n"
    _vars = GETVARLIST(EscapeSpaces("%(var_prefix_bind_script).%(current_ghost).%(current_shell).%(_scope)"))
    foreach _vars; _var {
      _sp = SPLIT(_var, '.')
      _key = _sp[ARRAYSIZE(_sp) - 1]
      _script += "\![*]\q[%(_key),OnBindRestoreSelected,%(_var)]  \q[delete,OnEraseDressupVar,%(_var)]\n"
    }
    _script += '\n'
  }
  _script + "\n\![*]\q[戻る,OnMenuExec,dummy,%(current_ghost),%(current_shell)]"
}

OnEraseDressupVar
{
  _sp = SPLIT(reference[0], '.')
  _key = _sp[ARRAYSIZE(_sp) - 1]
  "\0\_q「%(_key)」を削除しますか？\n/
  \![*]\q[削除する,OnEraseDressupVarConfirmed,%(reference[0])]/
  \![*]\q[削除しない,OnBindRestoreMenu]/
  "
}

OnEraseDressupVarConfirmed
{
  ERASEVAR(reference[0])
  "\_q削除しました。\x\![raiseplugin,%(name),OnBindRestoreMenu]"
}

OnBindRestoreSelected
{
  is_limit_dressup_changed_dialog = 1
  EVAL(EscapeSpaces(reference[0])) + "\![raiseplugin,%(name),OnBindRestoreMenu]"
}

EscapeSpaces
{
  REPLACE(_argv[0], ' ', '_')
}

GetDescriptScope
{
  case _argv[0] {
    when 0 {
      'sakura'
    }
    when 1 {
      'kero'
    }
    others {
      "char%(_argv[0])"
    }
  }
}

GetCharacterName
{
  _scope = _argv[0]
  _chara_names = EVAL(EscapeSpaces("%(var_prefix_chara_names).%(current_ghost)"))
  _chara_names[_scope]
}

version
{
  "%(name)/0.5.3"
}
